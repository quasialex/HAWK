# modules/payloads/msf_exploit.rb
require_relative '../../core/module_base'
require_relative '../../core/registry'

begin
  require 'msfrpc-client'
rescue LoadError
end

module Hackberry
  class MsfExploit < ModuleBase
    def self.id; 'pay_msf_exploit'; end
    def self.category; :payloads; end
    def self.label; 'MSF Exploit (RPC)'; end
    def self.icon; 'ðŸ“¦'; end

    def self.actions
      [
        { id:'run', label:'Run exploit', description:'Execute exploit with basic options',
          inputs:[
            {name:'host', label:'RPC Host', type:'text', default:'127.0.0.1'},
            {name:'port', label:'RPC Port', type:'number', default:'55553'},
            {name:'user', label:'RPC User', type:'text', default:'msf'},
            {name:'pass', label:'RPC Pass', type:'text', default:'msf'},
            {name:'module', label:'Exploit module', type:'text', default:'exploit/multi/handler'},
            {name:'payload', label:'Payload (opt)', type:'text', default:''},
            {name:'rhosts', label:'RHOSTS', type:'text', placeholder:'target(s)'},
            {name:'lhost', label:'LHOST', type:'text', placeholder:'0.0.0.0'},
            {name:'lport', label:'LPORT', type:'number', default:'4444'}
          ] }
      ]
    end

    def self.run(action_id, p, _cfg)
      unless defined?(Msf::RPC::Client)
        return { session:'none', cmd:'rpc', log:'msfrpc-client gem not installed' }
      end
      c = Msf::RPC::Client.new(host: p['host'], port: p['port'].to_i, ssl:false)
      c.login(p['user'], p['pass'])
      mod  = p['module']
      type = mod.start_with?('exploit/') ? 'exploit' : mod.split('/').first
      opts = {}
      opts['RHOSTS'] = p['rhosts'] if p['rhosts'] && !p['rhosts'].empty?
      opts['LHOST']  = p['lhost']  if p['lhost']  && !p['lhost'].empty?
      opts['LPORT']  = p['lport'].to_i if p['lport']
      opts['PAYLOAD']= p['payload'] if p['payload'] && !p['payload'].empty?
      res = c.call('module.execute', type, mod, opts)
      { session:'none', cmd:"module.execute #{mod}", log: res.inspect }
    end
  end
end

Hackberry::Registry.register(Hackberry::MsfExploit)
